name: SonarCloud

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://git.io/codeql-language-support
        compiler:
          # you can specify the version after `-` like "llvm-13.0.0".
          - gcc
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Debug
        qt_host:
          - linux
        qt_arch:
          - gcc_64

    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - name: Install dependencies
        run: sudo apt-get install -y libcurl4-openssl-dev libxcb-xinerama0 libxkbcommon-dev libxkbcommon-x11-dev doxygen graphviz

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          generator: ${{ matrix.generator }}
  
      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: false
  
          cmake: true
          ninja: true
          vcpkg: false
          ccache: true
          clangtidy: false
  
          cppcheck: false
  
          gcovr: false
          opencppcoverage: false

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.1'
          host: ${{ matrix.qt_host }}
          target: 'desktop'
          arch: ${{ matrix.qt_arch }}
          install-deps: 'true'
          cache: 'true'
          aqtversion: '==3.1.*'
          py7zrversion: '==0.20.*'

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1

      - name: Create Build Environment
        run: cmake -E make_directory ./build

      - name: Configure CMake
        run: |
          cmake -S . -B build -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE -DENABLE_DOCS:BOOL=FALSE -DCOMPILE_TESTS:BOOL=FALSE -DENABLE_CLANG_TIDY:BOOL=FALSE -DENABLE_CPPCHECK:BOOL=FALSE -DENABLE_INCLUDE_WHAT_YOU_USE:BOOL=FALSE
    
      - name: Run build-wrapper
        run: |
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build ./build --parallel ${{ env.nproc }} --config ${{matrix.build_type}}

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
